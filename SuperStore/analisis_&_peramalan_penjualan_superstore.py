# -*- coding: utf-8 -*-
"""Analisis & Peramalan Penjualan Superstore

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sdpMw-aYcO9GkZIwcRZWLA4hTgkX6r5I

Analisis dan Peramalan Penjualan Superstore

Deskripsi:
Proyek ini melakukan analisis data eksploratif (EDA) pada dataset penjualan Superstore dan membangun model forecasting untuk prediksi penjualan dengan menggunakan model XGBRegressor

Dataset: stores_sales_forecasting.csv
"""

!pip install xgboost scikit-learn pandas matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
import xgboost as xgb

file_path = "/content/stores_sales_forecasting.csv"
df = pd.read_csv(file_path, encoding="latin1")

df["Order Date"] = pd.to_datetime(df["Order Date"])
daily_sales = df.groupby("Order Date")["Sales"].sum().reset_index()
daily_sales = daily_sales.sort_values("Order Date")

daily_sales["day"] = daily_sales["Order Date"].dt.day
daily_sales["month"] = daily_sales["Order Date"].dt.month
daily_sales["year"] = daily_sales["Order Date"].dt.year
daily_sales["dayofweek"] = daily_sales["Order Date"].dt.dayofweek

for lag in [1, 2, 3, 7, 14, 30, 60]:
    daily_sales[f"lag_{lag}"] = daily_sales["Sales"].shift(lag)

daily_sales = daily_sales.dropna().reset_index(drop=True)

X = daily_sales.drop(["Order Date", "Sales"], axis=1)
y = daily_sales["Sales"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, shuffle=False
)

model = xgb.XGBRegressor(
    n_estimators=300,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mae = mean_absolute_error(y_test, y_pred)
print(f"RMSE: {rmse:.2f}")
print(f"MAE: {mae:.2f}")

plt.figure(figsize=(20,6))
plt.plot(daily_sales["Order Date"].iloc[len(X_train):], y_test, label="Actual", marker="o")
plt.plot(daily_sales["Order Date"].iloc[len(X_train):], y_pred, label="Predicted", marker="x")
plt.legend()
plt.title("Actual vs Predicted Sales")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.show()

n_forecast = 90  # prediksi 90 hari kedepan
last_date = daily_sales["Order Date"].max()
future_predictions = []

temp_data = daily_sales.copy()

for i in range(n_forecast):
    next_date = last_date + pd.Timedelta(days=i+1)
    new_row = {
        "day": next_date.day,
        "month": next_date.month,
        "year": next_date.year,
        "dayofweek": next_date.dayofweek,
    }

    for lag in [1, 7, 30]:
        if len(temp_data) - lag >= 0:
            new_row[f"lag_{lag}"] = temp_data.iloc[-lag]["Sales"]
        else:
            new_row[f"lag_{lag}"] = np.nan

    X_new = pd.DataFrame([new_row])
    pred = model.predict(X_new)[0]


    future_predictions.append((next_date, pred))

    temp_data = pd.concat([
        temp_data,
        pd.DataFrame({"Order Date": [next_date], "Sales": [pred]})
    ], ignore_index=True)

forecast_df = pd.DataFrame(future_predictions, columns=["Date", "Predicted_Sales"])

plt.figure(figsize=(25,6))
plt.plot(daily_sales["Order Date"].iloc[-90:], daily_sales["Sales"].iloc[-90:], label="Historical")
plt.plot(forecast_df["Date"], forecast_df["Predicted_Sales"], label="Forecast", marker="o", color="red")
plt.legend()
plt.title("Sales Forecast (Last 90 days + Forecast)")
plt.show()